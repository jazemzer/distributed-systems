{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome here! I'm not an expert in systems design but I've lately started reading more about designing distributed systems. And this site is an attempt to document my notes both for sharing and future reference. As I begin this journey, though I have a list of topics to cover, I don't have a concrete structure in my mind to organize these notes. But I hope over time I should be able to find a structure and reorganize them. TODO: https://www.enterpriseintegrationpatterns.com/patterns/messaging/Introduction.html","title":"Welcome here!"},{"location":"index.html#welcome-here","text":"I'm not an expert in systems design but I've lately started reading more about designing distributed systems. And this site is an attempt to document my notes both for sharing and future reference. As I begin this journey, though I have a list of topics to cover, I don't have a concrete structure in my mind to organize these notes. But I hope over time I should be able to find a structure and reorganize them.","title":"Welcome here!"},{"location":"index.html#todo","text":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/Introduction.html","title":"TODO:"},{"location":"concepts/fallacies.html","text":"Fallacies of Distributed Computing Network is reliable Calls over network can fail for various reasons. Therefore, Do automatic retries with idempotency Implement store and forward pattern with queues Latency is zero Sending data across a network is multiple orders of magnitude slower than making a local method call. Therefore, Avoid chatty network communication by bringing all the data at once Avoid Select N+1 problem by keeping remote calls coarse-grained Move the data closer to client - CDNs & Caching Invert flow of data - use pub/sub model with local storage Bandwidth is infinite Mobile and video streaming apps are sensitive to high bandwidth usage. Therefore, Use Domain driven design Don't strive for single enterprise domain model but rather partition domain model into BoundedContexts Avoid large object graph inside bounded contexts by using Aggregate pattern Use CQRS - Command Query Responsibility Separation Optimize read and write with separate models Network is secure Since security cannot be an afterthought, Do layered defense at different levels - network, application, storage Handle OWASP Top 10 vulnerabilities Implement threat modelling identify assets and access patterns identify possible attacks and execute them Topology doesn\u2019t change Since network topology changes all the time, we need to Abstract physical network Don\u2019t hardcode IPs - use DNS Use service discovery when IP and port are needed Use Service bus or multi cast for location transparency Treat servers as Cattle, Not pets Implement Chaos monkey There is one administrator In a complex system, it is impossible for one person to know everything. Therefore, Implement Centralized logging & monitoring Involve administrators early to spot production constraints (security, firewall, configurations) Decouple systems with queues Implement backward-compatible connections to allow for independent component upgrades Isolate/Abstract 3rd party systems Transport cost is zero Transporting data over network has a price both in time and resources. Time because serialization and deserialization involve CPU time and cost because of the infrastructure needed for transport. Therefore, Choose format wisely based on cost XML > JSON > ProtoBuf Network is homogeneous Having a homogeneous network is impossible to achieve. Therefore, Avoid vendor lock-in with proprietary protocols Choose standard formats for communication - Json, XML, etc References Understanding the 8 Fallacies of Distributed Systems - Dzone Whitepaper - Arnon Rotem-Gal-Oz","title":"Fallacies of Distributed Computing"},{"location":"concepts/fallacies.html#fallacies-of-distributed-computing","text":"","title":"Fallacies of Distributed Computing"},{"location":"concepts/fallacies.html#network-is-reliable","text":"Calls over network can fail for various reasons. Therefore, Do automatic retries with idempotency Implement store and forward pattern with queues","title":"Network is reliable"},{"location":"concepts/fallacies.html#latency-is-zero","text":"Sending data across a network is multiple orders of magnitude slower than making a local method call. Therefore, Avoid chatty network communication by bringing all the data at once Avoid Select N+1 problem by keeping remote calls coarse-grained Move the data closer to client - CDNs & Caching Invert flow of data - use pub/sub model with local storage","title":"Latency is zero"},{"location":"concepts/fallacies.html#bandwidth-is-infinite","text":"Mobile and video streaming apps are sensitive to high bandwidth usage. Therefore, Use Domain driven design Don't strive for single enterprise domain model but rather partition domain model into BoundedContexts Avoid large object graph inside bounded contexts by using Aggregate pattern Use CQRS - Command Query Responsibility Separation Optimize read and write with separate models","title":"Bandwidth is infinite"},{"location":"concepts/fallacies.html#network-is-secure","text":"Since security cannot be an afterthought, Do layered defense at different levels - network, application, storage Handle OWASP Top 10 vulnerabilities Implement threat modelling identify assets and access patterns identify possible attacks and execute them","title":"Network is secure"},{"location":"concepts/fallacies.html#topology-doesnt-change","text":"Since network topology changes all the time, we need to Abstract physical network Don\u2019t hardcode IPs - use DNS Use service discovery when IP and port are needed Use Service bus or multi cast for location transparency Treat servers as Cattle, Not pets Implement Chaos monkey","title":"Topology doesn\u2019t change"},{"location":"concepts/fallacies.html#there-is-one-administrator","text":"In a complex system, it is impossible for one person to know everything. Therefore, Implement Centralized logging & monitoring Involve administrators early to spot production constraints (security, firewall, configurations) Decouple systems with queues Implement backward-compatible connections to allow for independent component upgrades Isolate/Abstract 3rd party systems","title":"There is one administrator"},{"location":"concepts/fallacies.html#transport-cost-is-zero","text":"Transporting data over network has a price both in time and resources. Time because serialization and deserialization involve CPU time and cost because of the infrastructure needed for transport. Therefore, Choose format wisely based on cost XML > JSON > ProtoBuf","title":"Transport cost is zero"},{"location":"concepts/fallacies.html#network-is-homogeneous","text":"Having a homogeneous network is impossible to achieve. Therefore, Avoid vendor lock-in with proprietary protocols Choose standard formats for communication - Json, XML, etc","title":"Network is homogeneous"},{"location":"concepts/fallacies.html#references","text":"Understanding the 8 Fallacies of Distributed Systems - Dzone Whitepaper - Arnon Rotem-Gal-Oz","title":"References"}]}